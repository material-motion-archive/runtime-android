def file = new File('local.dependencies')
def substitutions = [] as Set<ComponentSelector>

file.exists() || file << new File('.local.dependencies.template').text

gradle.buildFinished {
  if (substitutions) {
    logger.lifecycle('Applied {} local dependency substitution(s).', substitutions.size())
    logger.info(substitutions.inject('') { acc, val -> acc + '\n\t* ' + val }.substring(1))
  }
}

allprojects {
  repositories {
    mavenLocal()
  }

  configurations.all {
    List<Dependency> localDependencies = (
      file as String[]
    ).collect {
      def line = trim it
      if (line) {
        this.project.dependencies.create(line + ":local")
      }
    }.grep { it }

    resolutionStrategy.dependencySubstitution.all { DependencySubstitution dependency ->
      if (dependency.requested instanceof ModuleComponentSelector) {
        ModuleComponentSelector requested = dependency.requested;

        Dependency local = localDependencies.find {
          it.group == requested.group && it.name == requested.module
        }

        if (local) {
          substitutions << requested
          dependency.useTarget([
            group  : local.group,
            name   : local.name,
            version: local.version,
          ])
        }
      }
    }
  }
}

String trim(String line) {
  def comment = line.indexOf('#')
  if (comment != -1) {
    line = line.substring(0, comment)
  }
  line.trim()
}
